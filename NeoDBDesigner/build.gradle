/*
* Gradle Build File by Chris Deter
*/
import org.gradle.plugins.ide.eclipse.model.AccessRule

plugins {
	id 'java'
	id 'eclipse'
	id 'idea'
	id 'application'
	id 'maven-publish'
	id 'antlr'
	id "com.diffplug.gradle.spotless" version "3.15.0"
}

def main = "de.mach.tools.neodesigner.ui.NeoDbDesignerStarter"
def name = 'Neo Database Manager'
// Vorsicht beim Ã¤ndern der Version, Artifakt wird danach evtl. nicht mehr im Repository gefunden
def vers = '1.2.5'  + '-SNAPSHOT'
def antlrGenSrc = "${project.buildDir}/generated-src/antlr/main/de/mach/tools/neodesigner/core/nimport/antlrsql/"

group = 'de.mach.tools'
sourceCompatibility = 1.8
version = vers
mainClassName = main
sourceSets.main.antlr.srcDirs = ['src/main/antlr/de/mach/tools/neodesigner/core/nimport/antlrsql/']

dependencies {
	// Apache Velocity (Apache License Version 2.0)
	compile 'org.apache.velocity:velocity-engine-core:2.0'

	// Neo4j Java Driver (Apache License Version 2.0)
	compile "org.neo4j.driver:neo4j-java-driver:1.7.+"

	// ANTLR (BSD License)
	compile "org.antlr:antlr4-runtime:4.7.1"

	//Graphstream (LGPL)
	compile "org.graphstream:gs-core:1.3"
	compile "org.graphstream:gs-ui:1.3"
	compile "org.graphstream:gs-algo:1.3"

	// ControlsFX (BSD-3 License)
	compile "org.controlsfx:controlsfx:8.40.14"
	// compile "org.controlsfx:controlsfx:9.0.0"

	// SLF4J Simple Logging Facade for Java (MIT License)
	compile "org.slf4j:slf4j-simple:1.7.25"

	// JUnit test framework
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.+'
	testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.+'
	testImplementation 'org.junit.vintage:junit-vintage-engine:5.+'
	testCompile 'org.testfx:testfx-junit:4.0+'

	// Generate Antlr Code
	antlr "org.antlr:antlr4:4.7.1"
}

jar {
	manifest {
		attributes 'Implementation-Title': name,
				'Implementation-Version': vers,
				'Main-Class': main
	}
}

//create a single executable Jar with all dependencies
task fatJar(type: Jar) {
	manifest.from jar.manifest
	classifier = ''
	from {
		configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
	} {
			exclude "META-INF/*.SF"
			exclude "META-INF/*.DSA"
			exclude "META-INF/*.RSA"
	}
	with jar
}

// Update Gradle
task buildWrapper(type: Wrapper) {
	gradleVersion = '4.9'
}

artifacts {
	archives fatJar
}

test {
	useJUnitPlatform()
}

// In this section you declare where to find the dependencies of your project
repositories {
	mavenCentral()
	jcenter()
}

// ------- Antlr Configuration -------
generateGrammarSource {
	maxHeapSize = "64m"
	arguments += ['-package', 'de.mach.tools.neodesigner.core.nimport.antlrsql']
	outputDirectory = new File(antlrGenSrc)
}
compileJava.dependsOn generateGrammarSource

// ------- Include Artifact publishing for MACH Toolchain -------
// apply from: 'publish-mach.gradle'

// ------- Code Formatter SETUP -------
spotless {
	format 'misc', {
		target '**/*.gradle', '**/*.md', '**/.gitignore'

		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		licenseHeaderFile 'spotless.license.java'		// License header file
		importOrderFile 'spotless.importorder'	// A sequence of package names
		removeUnusedImports() // removes any unused imports
		eclipse().configFile 'spotless.eclipseformat.xml'	// XML file dumped out by the Eclipse formatter
		encoding 'utf-8'
	}
}

afterEvaluate {
	tasks.getByName('spotlessCheck').dependsOn(tasks.getByName('spotlessApply'))
}

// ------- Eclipse IDE SETUP -------
eclipse.classpath {
	file.whenMerged {
		// Fix: Sourcefolder ANTLR
		cp -> cp.entries.add( new org.gradle.plugins.ide.eclipse.model.SourceFolder(antlrGenSrc, null) )

		//Java FX Packages Workaround
		entries.each { source ->
			if (source.kind == 'con' && source.path.startsWith('org.eclipse.jdt.launching.JRE_CONTAINER')) {
				source.accessRules.add(new AccessRule('0', 'javafx/**'))
			}
		}
	}
}

// ------- IntelliJ IDE SETUP -------
idea {
	module {
		// Marks the already(!) added srcDir as "generated"
		generatedSourceDirs += file(antlrGenSrc)
	}
}
