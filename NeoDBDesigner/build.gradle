/*
 * Gradle Build File by Chris Deter
 *
 * JavaFX Access Rule:  javafx/**
 */

def neo4jDriverVersion = "1.5.0"

import org.gradle.plugins.ide.eclipse.model.AccessRule

//group 'de.mach.tools'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

sourceCompatibility = 1.8
version = '1.2.0'
mainClassName = "de.mach.tools.neodesigner.ui.NeoDbDesignerStarter"

jar {
    manifest {
        attributes 'Implementation-Title': 'Neo Database Manager',
                   'Implementation-Version': version,
                   'Main-Class': 'de.mach.tools.neodesigner.ui.NeoDbDesignerStarter'
    }
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
  manifest.from jar.manifest
  classifier = 'all'
  from {
    configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
  } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
  }
  with jar
}

artifacts {
    archives fatJar
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
    jcenter()
}

dependencies {
	// Apache Velocity (Apache License Version 2.0)
	//compile group: 'org.apache.velocity', name: 'velocity', version: '1.7'
	compile 'org.apache.velocity:velocity-engine-core:2.0'
	
    
    //Neo4j (GPLv3)
    // compile "org.neo4j:neo4j:3.3.0"
    
    // Neo4j Java Driver (Apache License Version 2.0)
    // compile "org.neo4j.driver:neo4j-java-driver:+" // newest (alpha / beta) Driver
    compile "org.neo4j.driver:neo4j-java-driver:${neo4jDriverVersion}" 
    
    // use ANTLR (BSD License)
    compile "org.antlr:antlr4-runtime:4.7.1"
    
    //Graphstream (LGPL)
    compile "org.graphstream:gs-core:1.3"
    compile "org.graphstream:gs-ui:1.3"
    compile "org.graphstream:gs-algo:1.3"
    
    // use ControlsFX (BSD-3 License)
    compile "org.controlsfx:controlsfx:8.40.14"
    // compile "org.controlsfx:controlsfx:9.0.0"
    
    // Use JUnit test framework
    testImplementation 'junit:junit:4.+'
}

eclipse.classpath {
    file.whenMerged {
        entries.each { source -> 
            if (source.kind == 'con' && source.path.startsWith('org.eclipse.jdt.launching.JRE_CONTAINER')) {
                source.accessRules.add(new AccessRule('0', 'javafx/**'))
            }
        }
    }
}